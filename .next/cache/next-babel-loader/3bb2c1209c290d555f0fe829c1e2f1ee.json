{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback, useRef, useLayoutEffect } from 'react';\nimport checkProps from '@jam3/react-check-extra-props';\nimport classnames from 'classnames';\nimport { useCookies } from 'react-cookie';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './CoursePlanner.module.scss';\nimport DnDBoard, { DnDBoardType } from '../DnDBoard/DnDBoard';\nimport NewCourseModal from '../NewCourseModal/NewCourseModal';\nimport { API_ROUTES, apiBaseUrl, MODAL_KEYS } from '../../data/consts';\nimport { replaceSemester } from '../../redux/modules/semester';\nimport { replaceCourse } from '../../redux/modules/course';\nimport { openModal, closeModal } from '../../redux/modules/modal';\nimport copy from '../../data/copy.json';\n\nfunction CoursePlanner() {\n  var unassignedBoardRef = useRef();\n\n  var _useState = useState(false),\n      isCourseModalOpen = _useState[0],\n      setIsCourseModel = _useState[1];\n\n  var _useCookies = useCookies(['token']),\n      _useCookies2 = _slicedToArray(_useCookies, 1),\n      cookies = _useCookies2[0];\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      semesterInfo = _useSelector.semesterInfo;\n\n  var handleModalPortal = useCallback(function () {\n    if (Object.keys(semesterInfo).length === 0) {\n      dispatch(openModal(MODAL_KEYS.NEW_SEMESTER));\n    } else {\n      dispatch(closeModal());\n    }\n  }, [dispatch, semesterInfo]);\n  var fetchSavedSemesters = useCallback(function () {\n    axios({\n      method: 'get',\n      headers: {\n        authorization: cookies.token\n      },\n      url: API_ROUTES.SEMESTERS,\n      baseURL: apiBaseUrl\n    }).then(function (response) {\n      var data = response.data;\n      dispatch(replaceSemester(data));\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.fetchSemester);\n    });\n  }, [cookies.token, dispatch]);\n  var fetchAllCourses = useCallback(function () {\n    axios({\n      method: 'get',\n      headers: {\n        authorization: cookies.token\n      },\n      url: API_ROUTES.COURSE_ITEMS,\n      baseURL: apiBaseUrl\n    }).then(function (response) {\n      var data = response.data;\n      dispatch(replaceCourse(data));\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.fetchCourses);\n    });\n  }, [cookies.token, dispatch]);\n\n  var closeCourseModal = function closeCourseModal() {\n    setIsCourseModel(false);\n  };\n\n  var renderDnDBoard = function renderDnDBoard() {\n    if (semesterInfo.length > 0) {\n      return semesterInfo.map(function (semester_group) {\n        return __jsx(DnDBoard, {\n          id: semester_group.id,\n          key: semester_group.id,\n          semester: semester_group.semester,\n          styleClass: DnDBoardType.ASSIGNED,\n          fetchAllCourses: fetchAllCourses,\n          setIsCourseModel: setIsCourseModel\n        });\n      });\n    }\n  };\n\n  useLayoutEffect(function () {\n    fetchSavedSemesters();\n    fetchAllCourses(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); //TODO: Move NewCourseModal to ModalPortal and move semester info into redux\n\n  return __jsx(\"section\", {\n    className: classnames(styles.coursePlanner)\n  }, isCourseModalOpen ? __jsx(NewCourseModal, {\n    fetchAllCourses: fetchAllCourses,\n    unassignedBoardRef: unassignedBoardRef,\n    closeCourseModal: closeCourseModal\n  }) : null, __jsx(\"div\", {\n    className: styles.boardContainer\n  }, __jsx(\"button\", {\n    className: styles.newBoard,\n    onClick: function onClick() {\n      dispatch(openModal(MODAL_KEYS.NEW_SEMESTER));\n    }\n  }, \"Add new Semester\"), renderDnDBoard()), __jsx(\"div\", {\n    className: styles.courseSelection\n  }, __jsx(DnDBoard, {\n    id: DnDBoardType.UNASSIGNED,\n    styleClass: DnDBoardType.UNASSIGNED,\n    ref: unassignedBoardRef,\n    fetchAllCourses: fetchAllCourses,\n    setIsCourseModel: setIsCourseModel\n  })));\n}\n\nCoursePlanner.defaultProps = {};\nexport default CoursePlanner;","map":null,"metadata":{},"sourceType":"module"}