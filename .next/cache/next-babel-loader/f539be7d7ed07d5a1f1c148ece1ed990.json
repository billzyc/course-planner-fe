{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/bill.chen/Repo/studyplan-client/src/components/CoursePlanner/CoursePlanner.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport checkProps from '@jam3/react-check-extra-props';\nimport classnames from 'classnames';\nimport { useCookies } from 'react-cookie';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './CoursePlanner.module.scss';\nimport DnDBoard, { DnDBoardType } from '../DnDBoard/DnDBoard';\nimport NewCourseModal from '../NewCourseModal/NewCourseModal';\nimport { API_ROUTES, apiBaseUrl, MODAL_KEYS } from '../../data/consts';\nimport { replaceSemester } from '../../redux/modules/semester';\nimport { replaceCourse } from '../../redux/modules/course';\nimport { openModal, closeModal } from '../../redux/modules/modal';\nimport copy from '../../data/copy.json';\n\nfunction CoursePlanner() {\n  _s();\n\n  var _this = this;\n\n  var unassignedBoardRef = useRef();\n\n  var _useState = useState(false),\n      isCourseModalOpen = _useState[0],\n      setIsCourseModel = _useState[1];\n\n  var _useCookies = useCookies(['token']),\n      _useCookies2 = _slicedToArray(_useCookies, 1),\n      cookies = _useCookies2[0];\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      semesterInfo = _useSelector.semesterInfo;\n\n  var handleModalPortal = useCallback(function () {\n    if (Object.keys(semesterInfo).length === 0) {\n      dispatch(openModal(MODAL_KEYS.NEW_SEMESTER));\n    } else {\n      dispatch(closeModal());\n    }\n  }, [dispatch, semesterInfo]);\n  var fetchSavedSemesters = useCallback(function () {\n    axios({\n      method: 'get',\n      headers: {\n        authorization: cookies.token\n      },\n      url: API_ROUTES.SEMESTERS,\n      baseURL: apiBaseUrl\n    }).then(function (response) {\n      var data = response.data;\n      dispatch(replaceSemester(data));\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.fetchSemester);\n    });\n  }, [cookies.token, dispatch]);\n  var fetchAllCourses = useCallback(function () {\n    axios({\n      method: 'get',\n      headers: {\n        authorization: cookies.token\n      },\n      url: API_ROUTES.COURSE_ITEMS,\n      baseURL: apiBaseUrl\n    }).then(function (response) {\n      var data = response.data;\n      dispatch(replaceCourse(data));\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.fetchCourses);\n    });\n  }, [cookies.token, dispatch]);\n\n  var closeCourseModal = function closeCourseModal() {\n    setIsCourseModel(false);\n  };\n\n  var renderDnDBoard = function renderDnDBoard() {\n    if (semesterInfo.length > 0) {\n      return semesterInfo.map(function (semester_group) {\n        return __jsx(DnDBoard, {\n          id: semester_group.id,\n          key: semester_group.id,\n          semester: semester_group.semester,\n          styleClass: DnDBoardType.ASSIGNED,\n          fetchAllCourses: fetchAllCourses,\n          setIsCourseModel: setIsCourseModel,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }\n        });\n      });\n    }\n  };\n\n  useLayoutEffect(function () {\n    fetchSavedSemesters();\n    fetchAllCourses(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); //TODO: Move NewCourseModal to ModalPortal and move semester info into redux\n\n  return __jsx(\"section\", {\n    className: classnames(styles.coursePlanner),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, isCourseModalOpen ? __jsx(NewCourseModal, {\n    fetchAllCourses: fetchAllCourses,\n    unassignedBoardRef: unassignedBoardRef,\n    closeCourseModal: closeCourseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }) : null, __jsx(\"div\", {\n    className: styles.boardContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    className: styles.newBoard,\n    onClick: function onClick() {\n      dispatch(openModal(MODAL_KEYS.NEW_SEMESTER));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Add new Semester\"), renderDnDBoard()), __jsx(\"div\", {\n    className: styles.courseSelection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(DnDBoard, {\n    id: DnDBoardType.UNASSIGNED,\n    styleClass: DnDBoardType.UNASSIGNED,\n    ref: unassignedBoardRef,\n    fetchAllCourses: fetchAllCourses,\n    setIsCourseModel: setIsCourseModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(CoursePlanner, \"U03u7c5cD6XoMhqO+T5+v0zssbA=\", false, function () {\n  return [useCookies, useDispatch, useSelector];\n});\n\n_c = CoursePlanner;\nCoursePlanner.propTypes = checkProps({});\nCoursePlanner.defaultProps = {};\nexport default CoursePlanner;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoursePlanner\");","map":{"version":3,"sources":["/Users/bill.chen/Repo/studyplan-client/src/components/CoursePlanner/CoursePlanner.js"],"names":["React","useState","useEffect","useCallback","useRef","useLayoutEffect","PropTypes","checkProps","classnames","useCookies","axios","useSelector","useDispatch","styles","DnDBoard","DnDBoardType","NewCourseModal","API_ROUTES","apiBaseUrl","MODAL_KEYS","replaceSemester","replaceCourse","openModal","closeModal","copy","CoursePlanner","unassignedBoardRef","isCourseModalOpen","setIsCourseModel","cookies","dispatch","state","semesterInfo","handleModalPortal","Object","keys","length","NEW_SEMESTER","fetchSavedSemesters","method","headers","authorization","token","url","SEMESTERS","baseURL","then","response","data","catch","error","console","log","window","alert","fetchSemester","fetchAllCourses","COURSE_ITEMS","fetchCourses","closeCourseModal","renderDnDBoard","map","semester_group","id","semester","ASSIGNED","coursePlanner","boardContainer","newBoard","courseSelection","UNASSIGNED","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport checkProps from '@jam3/react-check-extra-props';\nimport classnames from 'classnames';\nimport { useCookies } from 'react-cookie';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport styles from './CoursePlanner.module.scss';\n\nimport DnDBoard, { DnDBoardType } from '../DnDBoard/DnDBoard';\nimport NewCourseModal from '../NewCourseModal/NewCourseModal';\nimport { API_ROUTES, apiBaseUrl, MODAL_KEYS } from '../../data/consts';\nimport { replaceSemester } from '../../redux/modules/semester';\nimport { replaceCourse } from '../../redux/modules/course';\nimport { openModal, closeModal } from '../../redux/modules/modal';\nimport copy from '../../data/copy.json';\n\nfunction CoursePlanner() {\n  const unassignedBoardRef = useRef();\n  const [isCourseModalOpen, setIsCourseModel] = useState(false);\n  const [cookies] = useCookies(['token']);\n  const dispatch = useDispatch();\n  const { semesterInfo } = useSelector(state => state);\n\n  const handleModalPortal = useCallback(() => {\n    if (Object.keys(semesterInfo).length === 0) {\n      dispatch(openModal(MODAL_KEYS.NEW_SEMESTER));\n    } else {\n      dispatch(closeModal());\n    }\n  }, [dispatch, semesterInfo]);\n\n  const fetchSavedSemesters = useCallback(() => {\n    axios({\n      method: 'get',\n      headers: { authorization: cookies.token },\n      url: API_ROUTES.SEMESTERS,\n      baseURL: apiBaseUrl\n    })\n      .then(response => {\n        const data = response.data;\n        dispatch(replaceSemester(data));\n      })\n      .catch(function(error) {\n        console.log(error);\n        window.alert(copy.error.fetchSemester);\n      });\n  }, [cookies.token, dispatch]);\n\n  const fetchAllCourses = useCallback(() => {\n    axios({\n      method: 'get',\n      headers: { authorization: cookies.token },\n      url: API_ROUTES.COURSE_ITEMS,\n      baseURL: apiBaseUrl\n    })\n      .then(response => {\n        const data = response.data;\n        dispatch(replaceCourse(data));\n      })\n      .catch(function(error) {\n        console.log(error);\n        window.alert(copy.error.fetchCourses);\n      });\n  }, [cookies.token, dispatch]);\n\n  const closeCourseModal = () => {\n    setIsCourseModel(false);\n  };\n\n  const renderDnDBoard = () => {\n    if (semesterInfo.length > 0) {\n      return semesterInfo.map(semester_group => {\n        return (\n          <DnDBoard\n            id={semester_group.id}\n            key={semester_group.id}\n            semester={semester_group.semester}\n            styleClass={DnDBoardType.ASSIGNED}\n            fetchAllCourses={fetchAllCourses}\n            setIsCourseModel={setIsCourseModel}\n          ></DnDBoard>\n        );\n      });\n    }\n  };\n  useLayoutEffect(() => {\n    fetchSavedSemesters();\n    fetchAllCourses();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  //TODO: Move NewCourseModal to ModalPortal and move semester info into redux\n\n  return (\n    <section className={classnames(styles.coursePlanner)}>\n      {isCourseModalOpen ? (\n        <NewCourseModal\n          fetchAllCourses={fetchAllCourses}\n          unassignedBoardRef={unassignedBoardRef}\n          closeCourseModal={closeCourseModal}\n        />\n      ) : null}\n      <div className={styles.boardContainer}>\n        <button\n          className={styles.newBoard}\n          onClick={() => {\n            dispatch(openModal(MODAL_KEYS.NEW_SEMESTER));\n          }}\n        >\n          Add new Semester\n        </button>\n        {renderDnDBoard()}\n      </div>\n      <div className={styles.courseSelection}>\n        <DnDBoard\n          id={DnDBoardType.UNASSIGNED}\n          styleClass={DnDBoardType.UNASSIGNED}\n          ref={unassignedBoardRef}\n          fetchAllCourses={fetchAllCourses}\n          setIsCourseModel={setIsCourseModel}\n        />\n      </div>\n    </section>\n  );\n}\n\nCoursePlanner.propTypes = checkProps({});\n\nCoursePlanner.defaultProps = {};\n\nexport default CoursePlanner;\n"]},"metadata":{},"sourceType":"module"}