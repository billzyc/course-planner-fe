{"ast":null,"code":"var _jsxFileName = \"/Users/bill.chen/Repo/studyplan-client/src/components/DnDBoard/DnDBoard.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport checkProps from '@jam3/react-check-extra-props';\nimport classnames from 'classnames';\nimport { useCookies } from 'react-cookie';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './DnDBoard.module.scss';\nimport { API_ROUTES, apiBaseUrl } from '../../data/consts';\nimport { replaceSemester } from '../../redux/modules/semester';\nimport DnDCard from '../DnDCard/DnDCard';\nimport copy from '../../data/copy.json';\n\nvar DeleteSVG = function DeleteSVG(props) {\n  return __jsx(\"svg\", props, __jsx(\"path\", {\n    d: \"M0 0h24v24H0V0z\",\n    fill: \"none\"\n  }), __jsx(\"path\", {\n    d: \"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\"\n  }));\n};\n\nDeleteSVG.defaultProps = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  width: \"24\"\n};\n\nvar AddSVG = function AddSVG(props) {\n  return __jsx(\"svg\", props, __jsx(\"path\", {\n    d: \"M0 0h24v24H0V0z\",\n    fill: \"none\"\n  }), __jsx(\"path\", {\n    d: \"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H8V4h12v12zm-7-2h2v-3h3V9h-3V6h-2v3h-3v2h3z\"\n  }));\n};\n\nAddSVG.defaultProps = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  width: \"24\"\n};\nexport const DnDBoardType = {\n  UNASSIGNED: 'unassigned',\n  ASSIGNED: 'assigned'\n};\nconst DnDBoard = /*#__PURE__*/forwardRef(({\n  id,\n  semester,\n  styleClass,\n  setIsCourseModel\n}, ref) => {\n  const semesterId = id;\n  const {\n    0: currentSemesterCourses,\n    1: setCurrentSemesterCourses\n  } = useState([]);\n  const [cookies] = useCookies(['token']);\n  const dispatch = useDispatch();\n  const {\n    courseInfo\n  } = useSelector(state => state);\n\n  const deleteBoard = () => {\n    axios({\n      method: 'delete',\n      headers: {\n        authorization: cookies.token\n      },\n      url: `${API_ROUTES.SEMESTERS}${id}`,\n      baseURL: apiBaseUrl\n    }).then(response => {\n      axios({\n        method: 'get',\n        headers: {\n          authorization: cookies.token\n        },\n        url: API_ROUTES.SEMESTERS,\n        baseURL: apiBaseUrl\n      }).then(response => {\n        const data = response.data;\n        dispatch(replaceSemester(data));\n      }).catch(function (error) {\n        console.log(error);\n        window.alert(copy.error.updateSemester);\n      });\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.deleteSemester);\n    });\n  };\n\n  const fetchCurrentSemesterCourses = () => {\n    axios({\n      method: 'get',\n      headers: {\n        authorization: cookies.token\n      },\n      url: API_ROUTES.COURSE_ITEMS,\n      params: {\n        semester_query: semesterId\n      },\n      baseURL: apiBaseUrl\n    }).then(response => {\n      const data = response.data;\n      setCurrentSemesterCourses(data);\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.fetchCourse);\n    });\n  };\n\n  const updateCardPlacement = (cardId, card) => {\n    const currentCourse = courseInfo.find(course => course.id === parseInt(cardId));\n    const {\n      course_number,\n      course_subject\n    } = currentCourse;\n    setCurrentSemesterCourses([...currentSemesterCourses, currentCourse]);\n    axios({\n      method: 'put',\n      headers: {\n        authorization: cookies.token\n      },\n      data: {\n        course_subject: course_subject,\n        course_number: course_number,\n        semester_placement: semesterId === 'unassigned' ? null : semesterId\n      },\n      url: `${API_ROUTES.COURSE_ITEMS}${cardId}/`,\n      baseURL: apiBaseUrl\n    }).then(response => {\n      fetchCurrentSemesterCourses();\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.updateCourse);\n    });\n  };\n\n  const drop = e => {\n    e.preventDefault();\n    const cardId = e.dataTransfer.getData('cardId');\n    updateCardPlacement(cardId);\n  };\n\n  const dragOver = e => {\n    e.preventDefault();\n  };\n\n  const removeDraggedCard = removedCourseID => {\n    const filteredCourseList = currentSemesterCourses.filter(course => course.id !== removedCourseID);\n    setCurrentSemesterCourses(filteredCourseList);\n  };\n\n  const renderCourseCards = () => {\n    if (currentSemesterCourses.length > 0) {\n      return currentSemesterCourses.map(course => {\n        return __jsx(DnDCard, {\n          id: course.id,\n          key: course.id,\n          updateBoard: fetchCurrentSemesterCourses,\n          removeDraggedCard: removeDraggedCard,\n          courseSubject: course.course_subject,\n          courseNumber: course.course_number,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }\n        });\n      });\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    updateCourses: fetchCurrentSemesterCourses\n  }));\n  useEffect(() => {\n    fetchCurrentSemesterCourses(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return __jsx(\"div\", {\n    id: id,\n    onDrop: drop,\n    onDragOver: dragOver,\n    className: styles.boardContainer,\n    className: classnames(styles[styleClass]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.semesterHeaders,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, semesterId !== DnDBoardType.UNASSIGNED ? __jsx(\"p\", {\n    className: styles.semesterTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, semester) : __jsx(\"p\", {\n    className: styles.semesterTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, \"Courses to complete\"), semesterId === DnDBoardType.UNASSIGNED ? __jsx(AddSVG, {\n    onClick: () => {\n      setIsCourseModel(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }) : __jsx(DeleteSVG, {\n    onClick: deleteBoard,\n    className: styles.delete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    className: styles.tileContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, renderCourseCards())));\n});\nDnDBoard.propTypes = checkProps({\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  semester: PropTypes.string,\n  styleClass: PropTypes.string\n});\nDnDBoard.defaultProps = {\n  styleClass: DnDBoard.ASSIGNED\n};\nexport default DnDBoard;","map":{"version":3,"sources":["/Users/bill.chen/Repo/studyplan-client/src/components/DnDBoard/DnDBoard.js"],"names":["React","useEffect","useState","forwardRef","useImperativeHandle","PropTypes","checkProps","classnames","useCookies","axios","useSelector","useDispatch","styles","API_ROUTES","apiBaseUrl","replaceSemester","DnDCard","copy","DeleteSVG","AddSVG","DnDBoardType","UNASSIGNED","ASSIGNED","DnDBoard","id","semester","styleClass","setIsCourseModel","ref","semesterId","currentSemesterCourses","setCurrentSemesterCourses","cookies","dispatch","courseInfo","state","deleteBoard","method","headers","authorization","token","url","SEMESTERS","baseURL","then","response","data","catch","error","console","log","window","alert","updateSemester","deleteSemester","fetchCurrentSemesterCourses","COURSE_ITEMS","params","semester_query","fetchCourse","updateCardPlacement","cardId","card","currentCourse","find","course","parseInt","course_number","course_subject","semester_placement","updateCourse","drop","e","preventDefault","dataTransfer","getData","dragOver","removeDraggedCard","removedCourseID","filteredCourseList","filter","renderCourseCards","length","map","updateCourses","boardContainer","semesterHeaders","semesterTitle","delete","tileContainer","propTypes","oneOfType","string","number","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport checkProps from '@jam3/react-check-extra-props';\nimport classnames from 'classnames';\nimport { useCookies } from 'react-cookie';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport styles from './DnDBoard.module.scss';\n\nimport { API_ROUTES, apiBaseUrl } from '../../data/consts';\nimport { replaceSemester } from '../../redux/modules/semester';\nimport DnDCard from '../DnDCard/DnDCard';\nimport copy from '../../data/copy.json';\n\nimport { ReactComponent as DeleteSVG } from '../../assets/svgs/delete.svg';\nimport { ReactComponent as AddSVG } from '../../assets/svgs/add.svg';\n\nexport const DnDBoardType = {\n  UNASSIGNED: 'unassigned',\n  ASSIGNED: 'assigned'\n};\n\nconst DnDBoard = forwardRef(({ id, semester, styleClass, setIsCourseModel }, ref) => {\n  const semesterId = id;\n  const [currentSemesterCourses, setCurrentSemesterCourses] = useState([]);\n  const [cookies] = useCookies(['token']);\n  const dispatch = useDispatch();\n  const { courseInfo } = useSelector((state) => state);\n\n  const deleteBoard = () => {\n    axios({\n      method: 'delete',\n      headers: { authorization: cookies.token },\n      url: `${API_ROUTES.SEMESTERS}${id}`,\n      baseURL: apiBaseUrl\n    })\n      .then((response) => {\n        axios({\n          method: 'get',\n          headers: { authorization: cookies.token },\n          url: API_ROUTES.SEMESTERS,\n          baseURL: apiBaseUrl\n        })\n          .then((response) => {\n            const data = response.data;\n            dispatch(replaceSemester(data));\n          })\n          .catch(function (error) {\n            console.log(error);\n            window.alert(copy.error.updateSemester);\n          });\n      })\n      .catch(function (error) {\n        console.log(error);\n        window.alert(copy.error.deleteSemester);\n      });\n  };\n\n  const fetchCurrentSemesterCourses = () => {\n    axios({\n      method: 'get',\n      headers: { authorization: cookies.token },\n      url: API_ROUTES.COURSE_ITEMS,\n      params: { semester_query: semesterId },\n      baseURL: apiBaseUrl\n    })\n      .then((response) => {\n        const data = response.data;\n        setCurrentSemesterCourses(data);\n      })\n      .catch(function (error) {\n        console.log(error);\n        window.alert(copy.error.fetchCourse);\n      });\n  };\n\n  const updateCardPlacement = (cardId, card) => {\n    const currentCourse = courseInfo.find((course) => course.id === parseInt(cardId));\n    const { course_number, course_subject } = currentCourse;\n    setCurrentSemesterCourses([...currentSemesterCourses, currentCourse]);\n    axios({\n      method: 'put',\n      headers: { authorization: cookies.token },\n      data: {\n        course_subject: course_subject,\n        course_number: course_number,\n        semester_placement: semesterId === 'unassigned' ? null : semesterId\n      },\n      url: `${API_ROUTES.COURSE_ITEMS}${cardId}/`,\n      baseURL: apiBaseUrl\n    })\n      .then((response) => {\n        fetchCurrentSemesterCourses();\n      })\n      .catch(function (error) {\n        console.log(error);\n        window.alert(copy.error.updateCourse);\n      });\n  };\n\n  const drop = (e) => {\n    e.preventDefault();\n    const cardId = e.dataTransfer.getData('cardId');\n    updateCardPlacement(cardId);\n  };\n\n  const dragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const removeDraggedCard = (removedCourseID) => {\n    const filteredCourseList = currentSemesterCourses.filter((course) => course.id !== removedCourseID);\n    setCurrentSemesterCourses(filteredCourseList);\n  };\n\n  const renderCourseCards = () => {\n    if (currentSemesterCourses.length > 0) {\n      return currentSemesterCourses.map((course) => {\n        return (\n          <DnDCard\n            id={course.id}\n            key={course.id}\n            updateBoard={fetchCurrentSemesterCourses}\n            removeDraggedCard={removeDraggedCard}\n            courseSubject={course.course_subject}\n            courseNumber={course.course_number}\n          />\n        );\n      });\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    updateCourses: fetchCurrentSemesterCourses\n  }));\n\n  useEffect(() => {\n    fetchCurrentSemesterCourses();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div\n      id={id}\n      onDrop={drop}\n      onDragOver={dragOver}\n      className={styles.boardContainer}\n      className={classnames(styles[styleClass])}\n    >\n      <div className={styles.semesterHeaders}>\n        {semesterId !== DnDBoardType.UNASSIGNED ? (\n          <p className={styles.semesterTitle}>{semester}</p>\n        ) : (\n          <p className={styles.semesterTitle}>Courses to complete</p>\n        )}\n\n        {semesterId === DnDBoardType.UNASSIGNED ? (\n          <AddSVG\n            onClick={() => {\n              setIsCourseModel(true);\n            }}\n          />\n        ) : (\n          <DeleteSVG onClick={deleteBoard} className={styles.delete} />\n        )}\n      </div>\n      <div className={styles.tileContainer}>\n        <React.Fragment>{renderCourseCards()}</React.Fragment>\n      </div>\n    </div>\n  );\n});\n\nDnDBoard.propTypes = checkProps({\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  semester: PropTypes.string,\n  styleClass: PropTypes.string\n});\n\nDnDBoard.defaultProps = {\n  styleClass: DnDBoard.ASSIGNED\n};\n\nexport default DnDBoard;\n"]},"metadata":{},"sourceType":"module"}