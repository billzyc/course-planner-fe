{"ast":null,"code":"import detect from './detect';\nimport deviceMatrix from './device-matrix.json';\nconst {\n  browser,\n  os,\n  bots\n} = detect;\n/**\n * Returns if the current browser is supported by the web app\n * The algorithm is inclusive, so we enumerate everything we don't support, after that everything is supported\n *\n * @returns {Boolean} supported\n */\n\nfunction isSupported() {\n  const userBrowser = browser.getName().toLowerCase();\n  const userBrowserVersion = parseFloat(browser.getVersion());\n  const userOS = os ? os.getName().toLowerCase() : 'unknown';\n  const userOSVersion = os.getVersion() === 'Unknown' ? Number.MAX_SAFE_INTEGER : parseFloat(os.getVersion());\n\n  if (bots.isBot()) {\n    return true;\n  }\n\n  const supportedOsVersion = deviceMatrix[userOS];\n  const supportedBrowserVersion = deviceMatrix[userBrowser];\n  const supportedVersion = supportedBrowserVersion || supportedOsVersion;\n\n  if (supportedVersion) {\n    if (supportedOsVersion !== undefined) {\n      if (userOSVersion < supportedOsVersion) {\n        return false;\n      }\n    }\n\n    if (supportedBrowserVersion !== undefined) {\n      /* Special contrains here */\n      if (userBrowserVersion < supportedBrowserVersion) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Print current browser information\n *\n * @returns {String} Browser|Browser Version|OS|OS Version|UA\n */\n\n\nfunction getBrowserInformation() {\n  return `\n    browser: ${browser.getName()},\n    browser version: ${browser.getVersion()},\n    os: ${os.getName()},\n    os version: ${os.getVersion()},\n    ua: ${navigator.userAgent}\n  `;\n}\n\nexport { isSupported, getBrowserInformation };","map":null,"metadata":{},"sourceType":"module"}