{"ast":null,"code":"import detect from './detect';\nimport deviceMatrix from './device-matrix.json';\nconst {\n  browser,\n  os,\n  bots\n} = detect;\n/**\n * Returns if the current browser is supported by the web app\n * The algorithm is inclusive, so we enumerate everything we don't support, after that everything is supported\n *\n * @returns {Boolean} supported\n */\n\nfunction isSupported() {\n  const userBrowser = browser.getName().toLowerCase();\n  const userBrowserVersion = parseFloat(browser.getVersion());\n  const userOS = os ? os.getName().toLowerCase() : 'unknown';\n  const userOSVersion = os.getVersion() === 'Unknown' ? Number.MAX_SAFE_INTEGER : parseFloat(os.getVersion());\n\n  if (bots.isBot()) {\n    return true;\n  }\n\n  const supportedOsVersion = deviceMatrix[userOS];\n  const supportedBrowserVersion = deviceMatrix[userBrowser];\n  const supportedVersion = supportedBrowserVersion || supportedOsVersion;\n\n  if (supportedVersion) {\n    if (supportedOsVersion !== undefined) {\n      if (userOSVersion < supportedOsVersion) {\n        return false;\n      }\n    }\n\n    if (supportedBrowserVersion !== undefined) {\n      /* Special contrains here */\n      if (userBrowserVersion < supportedBrowserVersion) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Print current browser information\n *\n * @returns {String} Browser|Browser Version|OS|OS Version|UA\n */\n\n\nfunction getBrowserInformation() {\n  return `\n    browser: ${browser.getName()},\n    browser version: ${browser.getVersion()},\n    os: ${os.getName()},\n    os version: ${os.getVersion()},\n    ua: ${navigator.userAgent}\n  `;\n}\n\nexport { isSupported, getBrowserInformation };","map":{"version":3,"sources":["/Users/bill.chen/Repo/studyplan-client/src/utils/unsupported-utils.js"],"names":["detect","deviceMatrix","browser","os","bots","isSupported","userBrowser","getName","toLowerCase","userBrowserVersion","parseFloat","getVersion","userOS","userOSVersion","Number","MAX_SAFE_INTEGER","isBot","supportedOsVersion","supportedBrowserVersion","supportedVersion","undefined","getBrowserInformation","navigator","userAgent"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,EAAX;AAAeC,EAAAA;AAAf,IAAwBJ,MAA9B;AAEA;;;;;;;AAMA,SAASK,WAAT,GAAuB;AACrB,QAAMC,WAAW,GAAGJ,OAAO,CAACK,OAAR,GAAkBC,WAAlB,EAApB;AACA,QAAMC,kBAAkB,GAAGC,UAAU,CAACR,OAAO,CAACS,UAAR,EAAD,CAArC;AACA,QAAMC,MAAM,GAAGT,EAAE,GAAGA,EAAE,CAACI,OAAH,GAAaC,WAAb,EAAH,GAAgC,SAAjD;AACA,QAAMK,aAAa,GAAGV,EAAE,CAACQ,UAAH,OAAoB,SAApB,GAAgCG,MAAM,CAACC,gBAAvC,GAA0DL,UAAU,CAACP,EAAE,CAACQ,UAAH,EAAD,CAA1F;;AAEA,MAAIP,IAAI,CAACY,KAAL,EAAJ,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,QAAMC,kBAAkB,GAAGhB,YAAY,CAACW,MAAD,CAAvC;AACA,QAAMM,uBAAuB,GAAGjB,YAAY,CAACK,WAAD,CAA5C;AAEA,QAAMa,gBAAgB,GAAGD,uBAAuB,IAAID,kBAApD;;AAEA,MAAIE,gBAAJ,EAAsB;AACpB,QAAIF,kBAAkB,KAAKG,SAA3B,EAAsC;AACpC,UAAIP,aAAa,GAAGI,kBAApB,EAAwC;AACtC,eAAO,KAAP;AACD;AACF;;AAED,QAAIC,uBAAuB,KAAKE,SAAhC,EAA2C;AACzC;AAEA,UAAIX,kBAAkB,GAAGS,uBAAzB,EAAkD;AAChD,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;;;;AAKA,SAASG,qBAAT,GAAiC;AAC/B,SAAQ;eACKnB,OAAO,CAACK,OAAR,EAAkB;uBACVL,OAAO,CAACS,UAAR,EAAqB;UAClCR,EAAE,CAACI,OAAH,EAAa;kBACLJ,EAAE,CAACQ,UAAH,EAAgB;UACxBW,SAAS,CAACC,SAAU;GAL5B;AAOD;;AAED,SAASlB,WAAT,EAAsBgB,qBAAtB","sourcesContent":["import detect from './detect';\nimport deviceMatrix from './device-matrix.json';\n\nconst { browser, os, bots } = detect;\n\n/**\n * Returns if the current browser is supported by the web app\n * The algorithm is inclusive, so we enumerate everything we don't support, after that everything is supported\n *\n * @returns {Boolean} supported\n */\nfunction isSupported() {\n  const userBrowser = browser.getName().toLowerCase();\n  const userBrowserVersion = parseFloat(browser.getVersion());\n  const userOS = os ? os.getName().toLowerCase() : 'unknown';\n  const userOSVersion = os.getVersion() === 'Unknown' ? Number.MAX_SAFE_INTEGER : parseFloat(os.getVersion());\n\n  if (bots.isBot()) {\n    return true;\n  }\n\n  const supportedOsVersion = deviceMatrix[userOS];\n  const supportedBrowserVersion = deviceMatrix[userBrowser];\n\n  const supportedVersion = supportedBrowserVersion || supportedOsVersion;\n\n  if (supportedVersion) {\n    if (supportedOsVersion !== undefined) {\n      if (userOSVersion < supportedOsVersion) {\n        return false;\n      }\n    }\n\n    if (supportedBrowserVersion !== undefined) {\n      /* Special contrains here */\n\n      if (userBrowserVersion < supportedBrowserVersion) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Print current browser information\n *\n * @returns {String} Browser|Browser Version|OS|OS Version|UA\n */\nfunction getBrowserInformation() {\n  return `\n    browser: ${browser.getName()},\n    browser version: ${browser.getVersion()},\n    os: ${os.getName()},\n    os version: ${os.getVersion()},\n    ua: ${navigator.userAgent}\n  `;\n}\n\nexport { isSupported, getBrowserInformation };\n"]},"metadata":{},"sourceType":"module"}