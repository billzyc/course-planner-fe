{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport checkProps from '@jam3/react-check-extra-props';\nimport classnames from 'classnames';\nimport { useCookies } from 'react-cookie';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './DnDBoard.module.scss';\nimport { API_ROUTES, apiBaseUrl } from '../../data/consts';\nimport { replaceSemester } from '../../redux/modules/semester';\nimport DnDCard from '../DnDCard/DnDCard';\nimport copy from '../../data/copy.json';\n\nvar DeleteSVG = function DeleteSVG(props) {\n  return __jsx(\"svg\", props, __jsx(\"path\", {\n    d: \"M0 0h24v24H0V0z\",\n    fill: \"none\"\n  }), __jsx(\"path\", {\n    d: \"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\"\n  }));\n};\n\nDeleteSVG.defaultProps = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  width: \"24\"\n};\n\nvar AddSVG = function AddSVG(props) {\n  return __jsx(\"svg\", props, __jsx(\"path\", {\n    d: \"M0 0h24v24H0V0z\",\n    fill: \"none\"\n  }), __jsx(\"path\", {\n    d: \"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H8V4h12v12zm-7-2h2v-3h3V9h-3V6h-2v3h-3v2h3z\"\n  }));\n};\n\nAddSVG.defaultProps = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  width: \"24\"\n};\nexport var DnDBoardType = {\n  UNASSIGNED: 'unassigned',\n  ASSIGNED: 'assigned'\n};\nvar DnDBoard = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      semester = _ref.semester,\n      styleClass = _ref.styleClass,\n      setIsCourseModel = _ref.setIsCourseModel;\n  var semesterId = id;\n\n  var _useState = useState([]),\n      currentSemesterCourses = _useState[0],\n      setCurrentSemesterCourses = _useState[1];\n\n  var _useCookies = useCookies(['token']),\n      _useCookies2 = _slicedToArray(_useCookies, 1),\n      cookies = _useCookies2[0];\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      courseInfo = _useSelector.courseInfo;\n\n  var deleteBoard = function deleteBoard() {\n    axios({\n      method: 'delete',\n      headers: {\n        authorization: cookies.token\n      },\n      url: \"\".concat(API_ROUTES.SEMESTERS).concat(id),\n      baseURL: apiBaseUrl\n    }).then(function (response) {\n      axios({\n        method: 'get',\n        headers: {\n          authorization: cookies.token\n        },\n        url: API_ROUTES.SEMESTERS,\n        baseURL: apiBaseUrl\n      }).then(function (response) {\n        var data = response.data;\n        dispatch(replaceSemester(data));\n      }).catch(function (error) {\n        console.log(error);\n        window.alert(copy.error.updateSemester);\n      });\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.deleteSemester);\n    });\n  };\n\n  var fetchCurrentSemesterCourses = function fetchCurrentSemesterCourses() {\n    axios({\n      method: 'get',\n      headers: {\n        authorization: cookies.token\n      },\n      url: API_ROUTES.COURSE_ITEMS,\n      params: {\n        semester_query: semesterId\n      },\n      baseURL: apiBaseUrl\n    }).then(function (response) {\n      var data = response.data;\n      setCurrentSemesterCourses(data);\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.fetchCourse);\n    });\n  };\n\n  var updateCardPlacement = function updateCardPlacement(cardId, card) {\n    var currentCourse = courseInfo.find(function (course) {\n      return course.id === parseInt(cardId);\n    });\n    var course_number = currentCourse.course_number,\n        course_subject = currentCourse.course_subject;\n    setCurrentSemesterCourses([].concat(_toConsumableArray(currentSemesterCourses), [currentCourse]));\n    axios({\n      method: 'put',\n      headers: {\n        authorization: cookies.token\n      },\n      data: {\n        course_subject: course_subject,\n        course_number: course_number,\n        semester_placement: semesterId === 'unassigned' ? null : semesterId\n      },\n      url: \"\".concat(API_ROUTES.COURSE_ITEMS).concat(cardId, \"/\"),\n      baseURL: apiBaseUrl\n    }).then(function (response) {\n      fetchCurrentSemesterCourses();\n    }).catch(function (error) {\n      console.log(error);\n      window.alert(copy.error.updateCourse);\n    });\n  };\n\n  var drop = function drop(e) {\n    e.preventDefault();\n    var cardId = e.dataTransfer.getData('cardId');\n    updateCardPlacement(cardId);\n  };\n\n  var dragOver = function dragOver(e) {\n    e.preventDefault();\n  };\n\n  var removeDraggedCard = function removeDraggedCard(removedCourseID) {\n    var filteredCourseList = currentSemesterCourses.filter(function (course) {\n      return course.id !== removedCourseID;\n    });\n    setCurrentSemesterCourses(filteredCourseList);\n  };\n\n  var renderCourseCards = function renderCourseCards() {\n    if (currentSemesterCourses.length > 0) {\n      return currentSemesterCourses.map(function (course) {\n        return __jsx(DnDCard, {\n          id: course.id,\n          key: course.id,\n          updateBoard: fetchCurrentSemesterCourses,\n          removeDraggedCard: removeDraggedCard,\n          courseSubject: course.course_subject,\n          courseNumber: course.course_number\n        });\n      });\n    }\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      updateCourses: fetchCurrentSemesterCourses\n    };\n  });\n  useEffect(function () {\n    fetchCurrentSemesterCourses(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return __jsx(\"div\", {\n    id: id,\n    onDrop: drop,\n    onDragOver: dragOver,\n    className: styles.boardContainer,\n    className: classnames(styles[styleClass])\n  }, __jsx(\"div\", {\n    className: styles.semesterHeaders\n  }, semesterId !== DnDBoardType.UNASSIGNED ? __jsx(\"p\", {\n    className: styles.semesterTitle\n  }, semester) : __jsx(\"p\", {\n    className: styles.semesterTitle\n  }, \"Courses to complete\"), semesterId === DnDBoardType.UNASSIGNED ? __jsx(AddSVG, {\n    onClick: function onClick() {\n      setIsCourseModel(true);\n    }\n  }) : __jsx(DeleteSVG, {\n    onClick: deleteBoard,\n    className: styles.delete\n  })), __jsx(\"div\", {\n    className: styles.tileContainer\n  }, __jsx(React.Fragment, null, renderCourseCards())));\n});\nDnDBoard.defaultProps = {\n  styleClass: DnDBoard.ASSIGNED\n};\nexport default DnDBoard;","map":null,"metadata":{},"sourceType":"module"}